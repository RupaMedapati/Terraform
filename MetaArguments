1. Loops with count
As the name suggests we need to use count but to use the count first we need to declare collections inside our terraform file.
Let's create a collection variable of type list(string) -
variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3"]
}
resource "aws_iam_user" "example" {
  count = length(var.user_names)
  name  = var.user_names[count.index]
}
provider "aws" {
   region     = "eu-central-1"
   access_key = "YOUR ACCESS KEY"
   secret_key = "YOUR SECRET ACCESS KEY"
}
resource "aws_instance" "ec2_example" {

   ami           = "AMI-OF YOUR REGION"
   instance_type =  "t2.micro"
   count = 1

   tags = {
           Name = "Terraform EC2"
   }

}

resource "aws_iam_user" "example" {
  count = length(var.user_names)
  name  = var.user_names[count.index]
}

variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3"]
}

3.	Loops with for_each

The for_each meta-argument accepts a map or a set of strings, and creates an instance for each item in that map or set. Each instance has a distinct infrastructure object associated with it, and each is separately created, updated, or destroyed when the configuration is applied.

The for_each is a little special in terraforming and you cannot use it on any collection variable.
It can only be used on set(string) or map(string).
The reason why for_each does not work on list(string) is because a list can contain duplicate values but if you are using set(string) or map(string) then it does not support duplicate values.
Let's first create a set(string) variable -
variable "user_names" {
  description = "IAM usernames"
  type        = set(string)
  default     = ["user1", "user2", "user3s"]
} 
Now let's iterate over the variable user_names.
resource "aws_iam_user" "example" {
  for_each = var.user_names
  name  = each.value
}
for loop
The for loop is pretty simple and if you have used any programming language before then I guess you will be pretty much familiar with the for loop.
Only the difference you will notice over here is the syntax in Terraform.
I am going to take the same example by declaring a list(string) and adding three users to it - user1, user2, user3
variable "user_names" {
  description = "IAM usernames"
  type        = list(string)
  default     = ["user1", "user2", "user3"]
} 
You can use the above-declared variable inside your terraform file in a very simple way -
output "print_the_names" {
  value = [for name in var.user_names : name]
}
How to iterate over MAP?
We can use a similar approach to iterate over the map also. But always keep in mind you need to specify the type of the map like string or number.
Here is the same example which I have taken but modified a bit for map -
variable "iam_users" {
  description = "map"
  type        = map(string)
  default     = {
    user1      = "normal user"
    user2  = "admin user"
    user3 = "root user"
  }
}
Now let's iterate over the map
output "user_with_roles" {
  value = [for name, role in var.iam_users : "${name} is the ${role}"]
}


Here is the difference between list and map syntax
For list -
{for <ITEM> in <LIST> : <OUTPUT_KEY> => <OUTPUT_VALUE>}
For Map -
{for <KEY>, <VALUE> in <MAP> : <OUTPUT_KEY> => <OUTPUT_VALUE>} 


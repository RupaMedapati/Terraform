Terraform Dynamic Block is important when you want to create multiple resources inside of similar types, so instead of copy and pasting the same terraform configuration in the terraform file does not make sense and it is not feasible if you need to create hundreds of resources using terraform.
If we describe terraform dynamic block in simple words then it is for loop which is going to iterate over and will help you to create a dynamic resource. With the help of dynamic blocks you can create nested repeatable blocks such as settings, ingress rules etc...
ex:
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "5.20.1"
    }
  }
}

provider "aws" {
  region = var.region
  access_key = "AKIAUIVLG47YBCHBDJNL"
  secret_key = "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"
}
resource "aws_vpc" "main" {
  cidr_block       = var.cidr_block
  tags = {
    Name = "networkwithec22"
  }
}
resource "aws_subnet" "prodsubnet" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "prodsubnet"
  }
}
resource "aws_subnet" "nonprodsubnet" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.2.0/24"

  tags = {
    Name = "nonprodsubnet"
  }
}
resource "aws_instance" "prodsubnetinstance" {
    
  ami           = "ami-0dbc3d7bc646e8516"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.prodsubnet.id
  associate_public_ip_address = true


  tags = {
    Name = "prodsubnetinstances22"
  }
}
resource "aws_instance" "nonorodsubnetinstance" {
    
  ami           = "ami-0dbc3d7bc646e8516"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.nonprodsubnet.id
  associate_public_ip_address = true


  tags = {
    Name = "nonprodsubnetinstances22"
  }
}
resource "aws_security_group" "communicationbetweensubnets" {
  name_prefix = "communiationbetweensubnets"
  vpc_id = aws_vpc.main.id
}

variable "allowed_ports" {
  type    = list(number)
  default = [80, 443]
}


resource "aws_security_group" "main" {
   name   = "resource_with_dynamic_block"
   vpc_id = aws_vpc.main.id

   dynamic "ingress" {
      for_each = var.allowed_ports
      iterator = port

      content {
         
         from_port   = port.value
         to_port     = port.value
         protocol    = "tcp"
         cidr_blocks = ["0.0.0.0/0"]
      }
   }

   tags = {
      Name = "AWS security group dynamic block"
   }
}

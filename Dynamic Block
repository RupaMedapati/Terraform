Terraform Dynamic Block is important when you want to create multiple resources inside of similar types, so instead of copy and pasting the same terraform configuration in the terraform file does not make sense and it is not feasible if you need to create hundreds of resources using terraform.
If we describe terraform dynamic block in simple words then it is for loop which is going to iterate over and will help you to create a dynamic resource. With the help of dynamic blocks you can create nested repeatable blocks such as settings, ingress rules etc...
ex:

resource "aws_vpc" "example_vpc" {
  cidr_block =  var.cidr_block # Define your VPC CIDR range
}

resource "aws_subnet" "prod_subnet" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.0.1.0/24"  # Define your production subnet CIDR range
  #availability_zone = var.instanceregion # Change to your desired availability zone
}

resource "aws_subnet" "nonprod_subnet" {
  vpc_id     = aws_vpc.example_vpc.id
  cidr_block = "10.0.2.0/24"  # Define your non-production subnet CIDR range
  #availability_zone = var.instanceregion  # Change to your desired availability zone
}

resource "aws_security_group" "subnet_communication" {
  name        = "subnet-communication"
  description = "Allow communication between prod and nonprod subnets"
  vpc_id = aws_vpc.example_vpc.id

  dynamic "ingress" {
    for_each = [80, 443]

    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = [aws_subnet.prod_subnet.cidr_block, aws_subnet.nonprod_subnet.cidr_block]
    }
  }
}
resource "aws_instance" "prod_instance" {
  count         = 2
  ami           = "ami-08cba41c585e4a2e2"  # Replace with the desired AMI ID
  instance_type = var.instance_type      # Replace with the desired instance type
  subnet_id     = aws_subnet.prod_subnet.id

  root_block_device {
    volume_size = 8  # Root volume size in GB
  }

  ebs_block_device {
    device_name = "/dev/sdf"
    volume_size = 50  # Additional disk size for production instances
    volume_type = "gp2"
  }

  vpc_security_group_ids = [aws_security_group.subnet_communication.id]
}

resource "aws_instance" "nonprod_instance" {
  count         = 2
  ami           = var.instance_type  # Replace with the desired AMI ID
  instance_type = "t2.micro"      # Replace with the desired instance type
  subnet_id     = aws_subnet.nonprod_subnet.id

  root_block_device {
    volume_size = 8  # Root volume size in GB
  }

  vpc_security_group_ids = [aws_security_group.subnet_communication.id]
}
